{"version":3,"sources":["PathFindingVisualizer/Node/Node.js","Algorithms/Dijkstra.js","Algorithms/BellmanFord.js","Algorithms/RecursiveBacktracking.js","Algorithms/A*.js","Algorithms/BestFirstSearch.js","PathFindingVisualizer/PathFindingVisualizer.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","isWeight","onMouseDown","onMouseEnter","onMouseUp","row","icon","className","wallClassName","id","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","getAllNodes","map","node","isVisited","console","log","length","sortNodesByDistance","closestNode","shift","Infinity","push","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","getUnvisitedNeighbors","neighbor","relax","source","destination","weight","previousNode","neighbors","filter","nodes","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","bellmanFord","visitedNodes","vertices","edges","unpackedEdges","edge","getEdges","array","i","j","Math","floor","random","shuffleArray","forEach","recursiveBactracking","endNode","mazePath","lastNodeOfStack","getRandomNeighborFromNode","getEdgeNode","pop","n","includes","rowEdgeNode","colEdgeNode","AStar","currentDistance","f","abs","manhattanDistance","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","wPressed","bind","state","mouseIsPressed","startIsPressed","endIsPressed","wKeyIsPressed","previousStart","previousEnd","isAlgoDone","isAnimation","getInitialGrid","setState","document","addEventListener","removeEventListener","prevProps","prevState","snapshot","visualizeDijkstra","event","keyCode","isEnd","newGrid","getNewGridWithWeightToggled","getNewGridWithWallToggled","getNewGridWithStartNodeUpdated","getNewGridWithEndNodeUpdated","visitedNodesInOrderLength","getElementById","setTimeout","animateShortestPath","previousNodeDocumentElement","childNodes","parentNode","removeChild","nodeDocumentElement","icon_truck","createElement","append","animate","animateDijkstra","resetNodesVisited","displayDijkstra","classList","remove","getNodesInShortestPathOrderBF","animateBellmanFord","bestFirstSearch","newStartGrid","newStartAndEndGrid","NUMBER_OF_ROWS","NUMBER_OF_COL","wallNodes","mazeGrid","onClick","visualizeBellmanFord","visualizeAStar","visualizeBestFirstSearch","generateMaze","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","pStart","newStart","pEnd","newEnd","App","gridId","uniqueId","resetGrid","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff476e34.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n    render() {\n        const {\n            col,\n            isFinish,\n            isStart,\n            isWall,\n            isWeight,\n            onMouseDown,\n            onMouseEnter,\n            onMouseUp,\n            row,\n        } = this.props;\n        const icon = isFinish\n            ? <i className=\"fas fa-flag-checkered\"/>\n            : isStart\n                ? <i className=\"fas fa-truck-loading\"/>\n                : isWeight\n                    ? <i className=\"fas fa-traffic-light\"/>\n                    : '';\n        const wallClassName = isWall ? 'node-wall' : '';\n\n\n        // <i className=\"fas fa-flag-checkered\"></i>\n        // <i className=\"fas fa-truck\"></i>\n        // <i className=\"fas fa-truck-loading\"></i>\n\n        return (\n            <div\n                id={`node-${row}-${col}`}\n                className={`node ${wallClassName}`}\n                onMouseDown={() => onMouseDown(row, col)}\n                onMouseEnter={() => onMouseEnter(row, col)}\n                onMouseUp={() => onMouseUp()}>{icon}</div>\n        );\n    }\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid).map(node => {node.isVisited = false; return node});\n    console.log(unvisitedNodes);\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid);\n    }\n}\n\nexport function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        relax(node, neighbor, neighbor.isWeight);\n    }\n}\n\nfunction relax(source, destination, isWeight) {\n    let weight = 1;\n    if(isWeight)\n        weight = 6;\n    if(destination.distance > source.distance + weight) {\n        destination.distance = source.distance + weight;\n        destination.previousNode = source;\n    }\n}\n\nexport function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nexport function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}","// Performs Bellman Ford's algorithm; returns a randomized array of visited nodes.\n// Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function bellmanFord(grid, startNode, finishNode) {\n    const visitedNodes = [];\n    startNode.distance = 0;\n    const vertices = getAllNodes(grid).filter(node => !node.isWall);\n    const edges = getEdges(vertices, grid);\n    // copy the destination node\n    // array randomized for the animation\n    // this array is for animation only\n    visitedNodes.push(...edges.map(edge => edge[1]));\n    shuffleArray(visitedNodes);\n\n    for (let i = 0; i < vertices.length - 1; i++) {\n        edges.forEach(edge => relax(edge[0], edge[1], edge[1].isWeight));\n    }\n    // todo: negative cycle\n    return visitedNodes;\n}\n\nfunction getEdges(vertices, grid) {\n    let unpackedEdges = [];\n    let edges = vertices.map(node => getUnvisitedNeighbors(node, grid).map(neighbor => [node, neighbor]));\n    for (const neighbors of edges) {\n        for (const edge of neighbors) {\n            unpackedEdges.push(edge);\n        }\n    }\n    // format [source, destination]\n    return unpackedEdges;\n}\n\nfunction relax(source, destination, isWeight) {\n    let weight = 1;\n    if (isWeight)\n        weight = 6;\n    if (destination.distance > source.distance + weight) {\n        destination.distance = source.distance + weight;\n        destination.previousNode = source;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isWall);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the bellmanFord method above.\nexport function getNodesInShortestPathOrderBF(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n        nodesInShortestPathOrder.unshift(currentNode);\n        currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n}\n\nfunction shuffleArray(array) {\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n    }\n}","// todo: comment\nexport function recursiveBactracking(grid, startNode, endNode) {\n    const visitedNodesInOrder = [];\n    // Everything not in Maze Path is wall\n    const mazePath = [];\n    startNode.isVisited = true;\n    visitedNodesInOrder.push(startNode);\n    mazePath.push(startNode);\n    while (!!visitedNodesInOrder.length) {\n        const lastNodeOfStack = visitedNodesInOrder[visitedNodesInOrder.length-1];\n        // console.log(\"lastnode: \", lastNodeOfStack);\n        const currentNode = getRandomNeighborFromNode(grid, lastNodeOfStack);\n        // console.log(\"current: \",currentNode);\n        if(currentNode) {\n            currentNode.isVisited = true;\n            mazePath.push(currentNode);\n            mazePath.push(getEdgeNode(grid, lastNodeOfStack, currentNode));\n            visitedNodesInOrder.push(currentNode);\n        } else {\n            visitedNodesInOrder.pop();\n        }\n\n    }\n    // return wall\n    return getAllNodes(grid).filter(n => !mazePath.includes(n));\n\n    // start from startNode\n    // get neighbour (two nodes in every directions) do some checks\n    // maintain stack of visited nodes for algo\n    // maintain array of nodes visited plus edges nodes visited\n    // put as wall all NOT visited nodes\n    // update and return grid\n\n    // Math.random() * (max - min) + min;\n\n}\n\nfunction getRandomNeighborFromNode(grid, node) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 2][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 2][col]);\n    if (col > 0) neighbors.push(grid[row][col - 2]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 2]);\n    const unvisitedNeighbors = neighbors.filter(neighbor => !neighbor.isVisited);\n    // console.log(\"neighbors: \",unvisitedNeighbors);\n    if (unvisitedNeighbors.length) {\n        const randomNumber = Math.floor(Math.random() * unvisitedNeighbors.length);\n        // console.log(\"Random Number: \", randomNumber);\n        return unvisitedNeighbors[randomNumber];\n    } else {\n        return undefined;\n    }\n\n}\n\nfunction getEdgeNode(grid, source, destination) {\n    const row = destination.row - source.row;\n    const col = destination.col - source.col;\n    const rowEdgeNode = row > 0 ? source.row+1 : row < 0 ? source.row-1 : source.row;\n    const colEdgeNode = col > 0 ? source.col+1 : col < 0 ? source.col-1 : source.col;\n    return grid[rowEdgeNode][colEdgeNode];\n\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function AStar(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    startNode.currentDistance = 0;\n    const unvisitedNodes = getAllNodes(grid).map(node => {\n        node.isVisited = false;\n        return node\n    });\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid, finishNode);\n    }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        relax(node, neighbor, neighbor.isWeight, finishNode);\n    }\n}\n\nfunction manhattanDistance(source, endNode) {\n    return Math.abs(endNode.col - source.col) + Math.abs(endNode.row - source.row);\n}\n\nfunction relax(source, destination, isWeight, finishNode) {\n    let weight = 1;\n    if (isWeight)\n        weight = 6;\n    const g = source.currentDistance + weight;\n    const h = manhattanDistance(destination, finishNode);\n    const f = g + h;\n    if (destination.distance > f) {\n        destination.currentDistance = source.currentDistance + weight;\n        destination.distance = f;\n        destination.previousNode = source;\n    }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const {col, row} = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n        for (const node of row) {\n            nodes.push(node);\n        }\n    }\n    return nodes;\n}\n\n","import {getAllNodes, sortNodesByDistance, getUnvisitedNeighbors} from \"./Dijkstra\";\n\nexport function bestFirstSearch(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    startNode.currentDistance = 0;\n    const unvisitedNodes = getAllNodes(grid).map(node => {\n        node.isVisited = false;\n        return node\n    });\n    while (!!unvisitedNodes.length) {\n        sortNodesByDistance(unvisitedNodes);\n        const closestNode = unvisitedNodes.shift();\n        // If we encounter a wall, we skip it.\n        if (closestNode.isWall) continue;\n        // If the closest node is at a distance of infinity,\n        // we must be trapped and should therefore stop.\n        if (closestNode.distance === Infinity) return visitedNodesInOrder;\n        closestNode.isVisited = true;\n        visitedNodesInOrder.push(closestNode);\n        if (closestNode === finishNode) return visitedNodesInOrder;\n        updateUnvisitedNeighbors(closestNode, grid, finishNode);\n    }\n}\n\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n        relax(node, neighbor, neighbor.isWeight, finishNode);\n    }\n}\n\nfunction manhattanDistance(source, endNode) {\n    return Math.abs(endNode.col - source.col) + Math.abs(endNode.row - source.row);\n}\n\nfunction relax(source, destination, isWeight, finishNode) {\n    let weight = 1;\n    if (isWeight)\n        weight = 6;\n    const g = weight;\n    const h = manhattanDistance(destination, finishNode);\n    const f = g + h;\n    if (destination.distance > f) {\n        destination.distance = f;\n        destination.previousNode = source;\n    }\n}","import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport './PathfindingVisualizer.css';\n\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/Dijkstra';\nimport {bellmanFord, getNodesInShortestPathOrderBF} from \"../Algorithms/BellmanFord\";\nimport {recursiveBactracking} from \"../Algorithms/RecursiveBacktracking\";\nimport {AStar} from \"../Algorithms/A*\";\nimport {bestFirstSearch} from \"../Algorithms/BestFirstSearch\";\n\nconst START_NODE_ROW = 15;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 15;\nconst FINISH_NODE_COL = 45;\n\nconst NUMBER_OF_ROWS = 31;\nconst NUMBER_OF_COL = 61;\n\nexport default class PathfindingVisualizer extends Component {\n    constructor(props) {\n        super(props);\n        this.wPressed = this.wPressed.bind(this);\n        this.state = {\n            grid: [],\n            mouseIsPressed: false,\n            startIsPressed: false,\n            endIsPressed: false,\n            wKeyIsPressed: false,\n            previousStart: {row: START_NODE_ROW, col: START_NODE_COL},\n            previousEnd: {row: FINISH_NODE_ROW, col: FINISH_NODE_COL},\n            isAlgoDone: false,\n            isAnimation: false,\n        };\n    }\n\n    componentDidMount() {\n        const grid = getInitialGrid();\n        this.setState({grid});\n        document.addEventListener(\"keydown\", this.wPressed, false);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.wPressed, false);\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        let finishDijkstra = ((this.state.endIsPressed || this.state.startIsPressed) && this.state.isAlgoDone\n            && (prevState.previousEnd !== this.state.previousEnd || prevState.previousStart !== this.state.previousStart));\n        if (finishDijkstra) this.visualizeDijkstra(false);\n    }\n\n    wPressed(event) {\n        if (event.keyCode === 87) {\n            this.setState({wKeyIsPressed: !this.state.wKeyIsPressed})\n        }\n    }\n\n    handleMouseDown(row, col, isStart, isEnd) {\n        if (!this.state.isAnimation) {\n            if (isStart) {\n                this.setState({startIsPressed: true, mouseIsPressed: true, previousStart: {row, col}});\n            } else if (isEnd) {\n                this.setState({endIsPressed: true, mouseIsPressed: true, previousEnd: {row, col}});\n            } else {\n                let newGrid;\n                if (this.state.wKeyIsPressed) {\n                    newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n                } else {\n                    newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n                }\n                this.setState({grid: newGrid, mouseIsPressed: true});\n            }\n        }\n    }\n\n    handleMouseEnter(row, col) {\n        if (!this.state.mouseIsPressed) return;\n        if (!this.state.startIsPressed && !this.state.endIsPressed) {\n            let newGrid;\n            if (this.state.wKeyIsPressed) {\n                newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n            } else {\n                newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n            }\n            this.setState({grid: newGrid});\n        } else {\n            // Avoid case where endNode = StartNode = wall\n            const currentNode = this.state.grid[row][col];\n            if (!currentNode.isWall) {\n                if (this.state.startIsPressed && !currentNode.isFinish) {\n                    const newGrid = getNewGridWithStartNodeUpdated(this.state.grid, this.state.previousStart, row, col);\n                    this.setState({grid: newGrid, previousStart: {row, col}});\n                } else if (!currentNode.isStart && this.state.endIsPressed) {\n                    const newGrid = getNewGridWithEndNodeUpdated(this.state.grid, this.state.previousEnd, row, col);\n                    this.setState({grid: newGrid, previousEnd: {row, col}});\n                }\n            }\n        }\n    }\n\n    handleMouseUp() {\n        this.setState({mouseIsPressed: false, startIsPressed: false, endIsPressed: false});\n    }\n\n    //Todo: this function should be merged w/ animateDijkstra\n    /// display Algorithm without time out or animation, instant display\n    displayDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        // We don't want the animation to cover the end Node (hence - 1)\n        const visitedNodesInOrderLength = visitedNodesInOrder.length - 1;\n        // We start at 1 so the animation do not cover the start Node\n        for (let i = 1; i <= visitedNodesInOrderLength; i++) {\n            if (i === visitedNodesInOrderLength) {\n                for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n                    const node = nodesInShortestPathOrder[i];\n                    document.getElementById(`node-${node.row}-${node.col}`).className =\n                        'node node-shortest-path-na';\n                }\n                return;\n            }\n            const node = visitedNodesInOrder[i];\n            document.getElementById(`node-${node.row}-${node.col}`).className =\n                'node node-visited-na';\n        }\n    }\n\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n        this.setState({isAnimation: true});\n        const visitedNodesInOrderLength = visitedNodesInOrder.length;\n        for (let i = 0; i <= visitedNodesInOrderLength; i++) {\n            if (i === visitedNodesInOrderLength) {\n                setTimeout(() => {\n                    this.animateShortestPath(nodesInShortestPathOrder);\n                }, 10 * i);\n                return;\n            }\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                //TODO: look to get rid off that document.getElementById maybe add to condition in Node.js\n                document.getElementById(`node-${node.row}-${node.col}`).className =\n                    'node node-visited';\n            }, 10 * i);\n        }\n    }\n\n    animateShortestPath(nodesInShortestPathOrder) {\n        for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\n            setTimeout(() => {\n                if (i > 1) {\n                    const previousNode = nodesInShortestPathOrder[i - 1];\n                    let previousNodeDocumentElement = document.getElementById(`node-${previousNode.row}-${previousNode.col}`).childNodes;\n                    for (const icon of previousNodeDocumentElement) {\n                        if (icon.className === \"fas fa-truck\")\n                            icon.parentNode.removeChild(icon);\n                    }\n                }\n                const node = nodesInShortestPathOrder[i];\n                let nodeDocumentElement = document.getElementById(`node-${node.row}-${node.col}`);\n                nodeDocumentElement.className = 'node node-shortest-path';\n                const icon_truck = document.createElement('i');\n                icon_truck.className = 'fas fa-truck';\n                nodeDocumentElement.append(icon_truck);\n            }, 50 * i);\n        }\n        // End of the animation, Algorithm is done\n        this.setState({\n            isAlgoDone: true,\n            isAnimation: false,\n        })\n    }\n\n    visualizeDijkstra(animate = true) {\n        const {grid, previousStart, previousEnd} = this.state;\n        const startNode = grid[previousStart.row][previousStart.col];\n        const finishNode = grid[previousEnd.row][previousEnd.col];\n        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        if (animate)\n            this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        else {\n            //TODO: refactor\n\n            // let grid = getInitialGrid();\n            // const previousStart = this.state.previousStart;\n            // const previousEnd = this.state.previousEnd;\n            // grid = getNewGridWithStartNodeUpdated(grid, {\n            //     row: START_NODE_ROW,\n            //     col: START_NODE_COL\n            // }, previousStart.row, previousStart.col);\n            // grid = getNewGridWithEndNodeUpdated(grid, {\n            //     row: FINISH_NODE_ROW,\n            //     col: FINISH_NODE_COL\n            // }, previousEnd.row, previousEnd.col);\n            const grid = resetNodesVisited(this.state.grid);\n            this.setState({grid});\n            this.displayDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n        }\n\n    }\n\n    animateBellmanFord(visitedNodesInOrder, nodesInShortestPathOrder) {\n        this.setState({isAnimation: true});\n        // No animation on start and finish node\n        visitedNodesInOrder = visitedNodesInOrder.filter(node => (!node.isStart && !node.isFinish));\n        const visitedNodesInOrderLength = visitedNodesInOrder.length;\n        for (let i = 0; i <= visitedNodesInOrderLength; i++) {\n            setTimeout(() => {\n                const node = visitedNodesInOrder[i];\n                // Change background back to white\n                if (i > 0) {\n                    const previousNode = visitedNodesInOrder[i - 1];\n                    document.getElementById(`node-${previousNode.row}-${previousNode.col}`).classList.remove('node-visited-na');\n                }\n                // display shortest path and change background back to white to the last node\n                if (i === visitedNodesInOrderLength) {\n                    const previousNode = visitedNodesInOrder[i - 1];\n                    document.getElementById(`node-${previousNode.row}-${previousNode.col}`).classList.remove('node-visited-na');\n                    setTimeout(() => {\n                        this.animateShortestPath(nodesInShortestPathOrder);\n                    }, 10);\n                    return;\n                }\n                //TODO: look to get rid off that document.getElementById maybe add to condition in Node.js\n                document.getElementById(`node-${node.row}-${node.col}`).className += ' node-visited-na';\n            }, 2 * i);\n        }\n    }\n\n    visualizeBellmanFord() {\n        const {grid, previousStart, previousEnd} = this.state;\n        const startNode = grid[previousStart.row][previousStart.col];\n        const finishNode = grid[previousEnd.row][previousEnd.col];\n        const visitedNodesInOrder = bellmanFord(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrderBF(finishNode);\n        this.animateBellmanFord(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    visualizeAStar() {\n        const {grid, previousStart, previousEnd} = this.state;\n        const startNode = grid[previousStart.row][previousStart.col];\n        const finishNode = grid[previousEnd.row][previousEnd.col];\n        const visitedNodesInOrder = AStar(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    visualizeBestFirstSearch() {\n        const {grid, previousStart, previousEnd} = this.state;\n        const startNode = grid[previousStart.row][previousStart.col];\n        const finishNode = grid[previousEnd.row][previousEnd.col];\n        const visitedNodesInOrder = bestFirstSearch(grid, startNode, finishNode);\n        const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n        this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n\n    generateMaze() {\n        // Put Start on top left and End bottom right of the grid\n        // The maze does not take in consideration start and finish\n        // We manually need to put this two nodes in odd row and col\n        //Todo: Factorise\n        const {grid, previousStart, previousEnd} = this.state;\n        const newStartGrid = getNewGridWithStartNodeUpdated(grid, previousStart, 0, 0);\n        const newStartAndEndGrid = getNewGridWithEndNodeUpdated(newStartGrid, previousEnd, NUMBER_OF_ROWS - 1, NUMBER_OF_COL - 1);\n        this.setState({\n            grid: newStartAndEndGrid,\n            previousStart: {row: 0, col: 0},\n            previousEnd: {row: NUMBER_OF_ROWS - 1, col: NUMBER_OF_COL - 1}\n        });\n        const startNode = grid[0][0];\n        const finishNode = grid[NUMBER_OF_ROWS - 1][NUMBER_OF_COL - 1];\n        const wallNodes = recursiveBactracking(grid, startNode, finishNode);\n        // TODO: Actualise the state once, create utility function\n        for (let i = 0; i < wallNodes.length; i++) {\n            const {grid} = this.state;\n            const {row, col} = wallNodes[i];\n            const mazeGrid = getNewGridWithWallToggled(grid, row, col);\n            this.setState({grid: mazeGrid});\n        }\n\n    }\n\n    render() {\n        const {grid, mouseIsPressed, wKeyIsPressed} = this.state;\n        return (\n            <>\n                <div>\n                    <button onClick={() => this.visualizeDijkstra()}>\n                        Visualize Dijkstra's Algorithm\n                    </button>\n                    <button onClick={() => this.visualizeBellmanFord()}>\n                        Visualize Bellman Ford's Algorithm\n                    </button>\n                    <button onClick={() => this.visualizeAStar()}>\n                        Visualize A* Algorithm\n                    </button>\n                    <button onClick={() => this.visualizeBestFirstSearch()}>\n                        Visualize Best First Search\n                    </button>\n                    <button onClick={() => this.generateMaze()}>\n                        Generate Maze\n                    </button>\n                    <span className={!wKeyIsPressed ? 'hidden' : ''}>Weight</span>\n                </div>\n                <div className=\"grid\">\n                    {grid.map((row, rowIdx) => {\n                        return (\n                            <div key={rowIdx}>\n                                {row.map((node, nodeIdx) => {\n                                    const {row, col, isFinish, isStart, isWall, isWeight} = node;\n                                    return (\n                                        <Node\n                                            key={nodeIdx}\n                                            col={col}\n                                            isFinish={isFinish}\n                                            isStart={isStart}\n                                            isWall={isWall}\n                                            isWeight={isWeight}\n                                            mouseIsPressed={mouseIsPressed}\n                                            onMouseDown={() => this.handleMouseDown(row, col, isStart, isFinish)}\n                                            onMouseEnter={() => this.handleMouseEnter(row, col)}\n                                            onMouseUp={() => this.handleMouseUp()}\n                                            row={row}\n                                        />\n                                    );\n                                })}\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n\n}\nconst getInitialGrid = () => {\n    // WARNING: the number of rows and columns should also be modified in Node.css\n    // AND in resetNodesVisited\n    const grid = [];\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\n        const currentRow = [];\n        for (let col = 0; col < NUMBER_OF_COL; col++) {\n            currentRow.push(createNode(col, row));\n        }\n        grid.push(currentRow);\n    }\n    return grid;\n};\nconst createNode = (col, row) => {\n    return {\n        col,\n        row,\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n        distance: Infinity,\n        isVisited: false,\n        isWall: false,\n        isWeight: false,\n        previousNode: null,\n    };\n};\nconst getNewGridWithWallToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    newGrid[row][col] = {\n        ...node,\n        isWall: !node.isWall,\n        isWeight: false,\n    };\n    return newGrid;\n};\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n    const newGrid = grid.slice();\n    const node = newGrid[row][col];\n    newGrid[row][col] = {\n        ...node,\n        isWeight: !node.isWeight,\n        isWall: false,\n    };\n    return newGrid;\n};\nconst getNewGridWithStartNodeUpdated = (grid, pStart, row, col) => {\n    const newGrid = grid.slice();\n    const previousStart = newGrid[pStart.row][pStart.col];\n    const newStart = newGrid[row][col];\n\n    newGrid[pStart.row][pStart.col] = {\n        ...previousStart,\n        isStart: false,\n    };\n\n    newGrid[row][col] = {\n        ...newStart,\n        isStart: true,\n    };\n    return newGrid;\n};\nconst getNewGridWithEndNodeUpdated = (grid, pEnd, row, col) => {\n    const newGrid = grid.slice();\n    const previousEnd = newGrid[pEnd.row][pEnd.col];\n    const newEnd = newGrid[row][col];\n\n    newGrid[pEnd.row][pEnd.col] = {\n        ...previousEnd,\n        isFinish: false,\n    };\n\n    newGrid[row][col] = {\n        ...newEnd,\n        isFinish: true,\n    };\n    return newGrid;\n};\n// We are resetting the grid entirely which is not optimal\n// todo: Should not create a new grid should only modify the current grid\nconst resetNodesVisited = (grid) => {\n    let newGrid = [];\n    for (let row = 0; row < NUMBER_OF_ROWS; row++) {\n        const currentRow = [];\n        for (let col = 0; col < NUMBER_OF_COL; col++) {\n            let node = {\n                ...grid[row][col],\n                isVisited: false,\n                previousNode: null,\n                distance: Infinity,\n            };\n            currentRow.push(node);\n            //Todo: take care of this document.getElementById!\n            document.getElementById(`node-${node.row}-${node.col}`).classList.remove(\n                \"node-visited\", \"node-visited-na\", \"node-shortest-path-na\", \"node-shortest-path\");\n        }\n        newGrid.push(currentRow);\n    }\n    return newGrid;\n};\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport PathFindingVisualiser from \"./PathFindingVisualizer/PathFindingVisualizer\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            gridId: 0,\n        }\n    }\n\n    // By updating the key of a Component we force the Dom to rerender\n    // and erase the previous Grid\n    resetGrid() {\n        this.setState((state) => {\n            return {gridId: state.gridId + 1}\n        })\n    }\n\n    render() {\n        let uniqueId = this.state.gridId;\n        return (\n            <div className=\"App\">\n                <button className={\"warm-red\"} onClick={() => this.resetGrid()}>\n                    Reset Grid\n                </button>\n                <PathFindingVisualiser key={uniqueId}/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}